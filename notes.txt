
START-UP TO CREATE A FULL STACK APP WITH AUTH

Create .gitignore file:
      /notes.txt

      /node_modules
      .DS_Store
      .env
      yarn.lock
      package-lock.json
  /**************************************************/

Create .env file
/**************************************************/


[Completed backend Installation with Auth]
Installation packages for back-end:
      npm init -y
      npm install express
      npm install pg sequelize
      npm install --save-dev nodemon 
      npm install cors body-parser morgan logger
      npm install bcrypt jsonwebtoken
/**************************************************/

Add to "scripts" in package.json
      "start": "node server.js",
      "dev": "nodemon server.js"
      (Don't forget to add a comma in the line above!)
/**************************************************/

Creating the Backend
    touch server.js
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    |  > const app = require('express')
    |    const bodyParser = require('body-parser')
    |    const cors = require('cors')
    |    
    |    const AppRouter = require('./routes')
    |
    |    const PORT = process.env.PORT || 3001
    |
    |    app.use(logger('dev'))
    |    app.use(cors())
    |    app.use(bodyParser.json())
    |
    |    app.get('/', (req, res) => res.json({ message: 'Server Works' }))
    |    app.use('/api', AppRouter)
    |
    |    app.listen(PORT, () => console.log(`Server Started On Port: ${PORT}`))
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    sequelize init
      > to initialize this as a sequelize project
          Make sure that the dialect in your config.json is postgres,
          remove unnecessary fields, and change the name of your database
          to the name you'd like to use.
                  sequelize db:create
                  sequelize sequelize model:generate --name <Your Model Name Goes Here> --attributes <someattribute>:<somedatatype>,<other stuff...>
                  sequelize db:migrate
                    > Best practice to run command after fixing models and setting associations 
                    > Need to undo migration => db:mirgrate:undo
                  sequelize seed:generate --name <Seed Name>
                  sequelize db:seed:all
                    > to seed a specific file => sequelize db:seed --seed seeders/filepath.js

Setting Up Express
  mkdir controllers routes 
  touch routes/index.js
  touch controllers/AuthController.js

Setting Up Auth
  mkdir middleware
  touch middleware/index.js
/**************************************************/



Installation packages/files for front-end:
    npx create-react-app client
    cd client
    npm install axios 
    npm install --save react-router-dom

    Note: clean up Client directory

    cd client/src/
      mkdir components pages
      touch globals.js
/**************************************************/

Command to run while working on project:
    npm start (front-end IN CLIENT DIRECTORY)
    npm run dev (in project's MAIN directory)